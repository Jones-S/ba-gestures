{"version":3,"sources":["leap-gestures.js"],"names":[],"mappingsfile":"all.js","sourcesContent":["(function ($) { // iief = Immediately-Invoked Function Expression, mainly useful to limit scope\n    $(function() { // Shorthand for $( document ).ready()\n\n        var ctx; // canvas 2d drawing context\n        var w = 1024, h = 768;\n        var canvas;\n        var thumb_up = false, cancel_gesture = false;\n        var recent_fast_moves = false;\n        var change_count = 0; // counting direction change of cancel gesture\n        var controller = new Leap.Controller({ frameEventName: 'animationFrame' });\n        var dir_change_timeout, fast_mov_timout; // timeouts\n\n        var last_frame = {\n            l_velocity : 0\n        };\n        controller.connect();\n\n        // assigns the info of the current frame to the var 'frame'.\n        // frame(1) would call the second last frame info and so on\n        controller.on('frame', function(frame){\n            // get 2d drawing context for our canvas if\n            // it hasn't been set up yet\n            if (!ctx) {\n                canvas = document.getElementById(\"drawing\");\n                ctx = canvas.getContext('2d');\n            }\n\n            /*\n            if fingers detected draw them on canvas\n            */\n            if (frame.pointables.length) {\n                // blank out canvas\n                ctx.clearRect(0, 0, w, h);\n                drawFingerTips(frame.pointables);\n            }\n\n            // check if thumb gesture is made\n            checkThumbUpGesture(frame);\n            // check cancel gesture\n            checkCancelGesture(frame);\n\n        });\n\n        function checkCancelGesture(frame) {\n\n            // TODO: Maybe need to check for fingers.extended\n            // so that a shaking fist is not registered as cancel\n\n            /**\n             * function to check if velocity is higher\n             * than a certain threshold\n             * @param  {object} veloc [with x,y,z vectors]\n             * @return {boolean}\n             */\n            var detectFastMovement = function (veloc) {\n                /**\n                 * loop through all vectors in velocity (x,y,z)\n                 * compare absolute value of number with a threshold-speed\n                 * if value is bigger, return true (fast Movement detected)\n                 */\n                loop:\n                for (var i = veloc.length - 1; i >= 0; i--) {\n                    if (Math.abs(veloc[i]) > 600) {\n                        return true;\n                    }\n                }\n                return false;\n\n\n            };\n\n            for (var i = frame.hands.length -1; i >= 0; i--) {\n                var hand = frame.hands[i];\n\n\n\n                /**\n                 * velocity of palm in three directions\n                 * in millimeters/second [vx,vy,vz]\n                 * x is parallel to leap motion device, y is up and down,\n                 * z is closer and further away from user.\n                 * check a lot of direction changes are registered\n                 * for winking = cancel gesture\n                 * @type {vector, vector, vector}\n                 */\n                var velocity = hand.palmVelocity;\n                var min_movement = 75;\n                // save last frames velocity in var for quicker access (faster writing)\n                var lv = last_frame['l_velocity'];\n\n                /**\n                 * check if very fast movement is in one of the 3 vectors\n                 * @return {boolean}\n                 */\n                if (detectFastMovement(velocity)) {\n                    // set timer to reset fastMovement boolean\n                    recent_fast_moves = true;\n                    clearTimeout(fast_mov_timout);\n                    fast_mov_timout = setTimeout(function(){\n                        recent_fast_moves = false;\n                    }, 900);\n                }\n\n                // debug log\n                console.log(\"lv[0]: \" + lv[0] + \"\\t\\t\\t\\tvelocity[0]: \" + velocity[0] + \"\\t\\t\\t\\tlv[2]: \" + lv[2] + \"\\t\\t\\t\\tvelocity[2]: \" + velocity[2] );\n\n\n                /**\n                 * check if change from - to + which indicates a direction change\n                 * in x direction (velocity[0])\n                 * and in z direction (velocity[2])\n                 * also check if direction change is big enough (bigger than min_movement)\n                 * to exclude random direction changes when holding still\n                 */\n                if (\n                        (velocity[0] > 0 && lv[0] < 0 && ((velocity[0] - lv[0]) >   min_movement))    ||\n                        (velocity[0] < 0 && lv[0] > 0 && ((velocity[0] - lv[0]) < - min_movement))    ||\n                        (velocity[2] > 0 && lv[2] < 0 && ((velocity[2] - lv[2]) >   min_movement))    ||\n                        (velocity[2] < 0 && lv[2] > 0 && ((velocity[2] - lv[2]) < - min_movement))\n                    ) {\n\n                    console.log(\"Direction Changed\");\n                    change_count++;\n\n                    /**\n                     * if change count is big enough\n                     * and if no fast moves registered recently\n                     * (which would mean somebody could be swiping)\n                     * then trigger cancel gesture\n                     */\n                    if (change_count > 4 && !recent_fast_moves) {\n                        cancel_gesture = true;\n                    }\n\n                    // set timeOut. if 1s is over without a direction change\n                    // count is reset.\n                    clearTimeout(dir_change_timeout);\n                    dir_change_timeout = setTimeout(function() {\n                        change_count = 0;\n                        // also reset gesture\n                        cancel_gesture = false;\n                    }, 1000);\n                }\n                // save velocity to last_frame for change detection in next frame\n                last_frame['l_velocity'] = velocity;\n\n                // change browser window\n                if (cancel_gesture) {\n                    $('body').addClass('cancel');\n                } else {\n                    $('body').removeClass('cancel');\n                }\n\n                // show hint in browser\n                if (recent_fast_moves) {\n                    $('body').addClass('fast-moves');\n                } else {\n                    $('body').removeClass('fast-moves');\n                }\n\n            }\n\n\n\n        }\n\n        function checkThumbUpGesture(frame) {\n            /**\n             * check for both hands\n             if fingers are not extended and thumb is extended\n             then trigger thumb up gesture\n             */\n            for (var i = frame.hands.length -1; i >= 0; i--) {\n                var hand = frame.hands[i];\n                var speed = hand.palmVelocity;\n\n                // generate names for fingers 0 = thumb, 1 = index etc.\n                var name_map = [\"thumb\", \"index\", \"middle\", \"ring\", \"pinky\"];\n                var folded_fingers = 0;\n                /**\n                 * make loop to check if fingers are extended.\n                 * if yes, break loop. no further checking required\n                 * because thumb up gesture needs all fingers except thumb to be folded\n                 */\n                outer_loop:\n                for (var j = hand.fingers.length - 1; j >= 0; j--) {\n                    // save each fingers name\n                    var finger = hand.fingers[j];\n                    var finger_name = name_map[finger.type];\n                    // check if extended, otherwise break loop\n                    if(finger.extended && finger_name !== \"thumb\") {\n                        break outer_loop;\n                    } else {\n                        folded_fingers++;\n                    }\n                }\n                // if 4 fingers are folded and thumb extended -> trigger gesture\n                if (folded_fingers > 3 && hand.thumb.extended) {\n                    var moving_fast = false;\n                    /**\n                     * speed indicates velocity of palm in three directions\n                     * in millimeters/second [vx,vy,vz]\n                     * check if speed is faster than 100mm/s\n                     * @type {vector, vector, vector}\n                     */\n\n                    for (var y = speed.length - 1; y >= 0; y--) {\n                        if ((speed[y] > 100) || (speed[y] < -100)) {\n                            moving_fast = true;\n                            break; // break from loop, because if one direction is too fast thats enough\n                        }\n                    }\n                    /*\n                     if not moving fast (and fingers are in the right position, check above)\n                     and if grabStrength == 1 (more ore less closed hand)\n                     assign thumb up gesture\n                     */\n                    if (!moving_fast && hand.grabStrength == 1) {\n                        thumb_up = true;\n                    }\n                } else {\n                    thumb_up = false;\n                }\n\n                // show thumb up gesture in browser\n                if (thumb_up) {\n                    $('body').addClass('thumb-up');\n                } else {\n                    $('body').removeClass('thumb-up');\n                }\n            }\n        }\n\n\n        function drawFingerTips(pointables) {\n\n            for (var i = pointables.length - 1; i >= 0; i--) {\n                var pointable = pointables[i];\n\n\n                // do we know where the tip of the finger or tool is\n                // located?\n                var tip = pointable.tipPosition;\n                if (!tip) return;\n                // get x/y/z coordinates of pointable tips\n                // and convert to coordinates that roughly\n                // live inside of the canvas dimensions.\n                var x = tip[0]*2 + w/2;\n                var y = -tip[1] + h/2;\n                // use depth to control the radius of the circle\n                // being drawn\n                var radius = (-tip[2] + 100) / 6;  // random numbers lol\n                if (radius < 10) radius = 10;      // not too small!\n                // begin drawing circle\n                ctx.beginPath();\n                // centered at (x,y) with radius scaled by depth, in a full arc\n                ctx.arc(x, y, radius, 0 , 2 * Math.PI, false);\n                ctx.lineWidth = 5;\n                // color based on which hand it is\n                var g = i % 2 ? 200 : 0;\n                ctx.strokeStyle = \"rgb(120,\" + g + \",35)\";\n                // draw circle\n                ctx.stroke();\n            }\n        }\n\n\n\n    });\n}(jQuery));"],"sourceRoot":"/source/"}